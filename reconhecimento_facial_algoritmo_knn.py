# -*- coding: utf-8 -*-
"""Reconhecimento facial Algoritmo KNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QqNFufimxNQMINVh8QpTNn_BpL82lbp9
"""

import numpy as np # linear algebra
import pandas as pd # data processing
import matplotlib.pyplot as plt # to plot inage, graph
import time

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline #importas biblioteca

from sklearn.datasets import load_digits #Importar

digits = load_digits() #carregamento dos dados

digits.keys() #atribuição da chaves para os dados

digits.DESCR #Descrever os dados

digits.images[0]  #listar as imagens

digits.data

digits. #Aplicação a função target a base de dados

print('Image Data Shape', digits.images.shape) #Demonstração da quantidade de fotos na base de dados

print('Label Data Shape', digits.target.shape)

X = digits.images

plt.figure(figsize=(20,10))
columns = 5 
for i in range(5):
  plt.subplot(5/columns + 1, columns, i +1)
  plt.imshow(X[i], cmap=plt.cm.gray_r, interpolation='nearest')

from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.model_selection import train_test_split

X = digits.data
y = digits.target

from sklearn.multiclass import OneVsRestClassifier

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

from sklearn.neighbors import KNeighborsClassifier

knn = OneVsRestClassifier(KNeighborsClassifier())

knn.fit(X_train, y_train)

knn.predict(X_test[0].reshape(1, -1))

knn.predict(X_test[0:10])

predictions = knn.predict(X_test)

# Commented out IPython magic to ensure Python compatibility.
# %time
print('KNN Accuracy: %.3f' % accuracy_score(y_test,predictions))

import seaborn as sns

"""# Apicação de matriz de confusão"""

cm = confusion_matrix(y_test,predictions)
plt.figure(figsize=(9,9))
sns.heatmap(cm,annot=True, fmt='.3f', linewidths=.5, square=True,cmap='Blues_r')
plt.ylabel('Rotulo Atual')
plt.xlabel('Rotulo de Predição')
all_sample_title = 'Acurácia: {0}'.format(accuracy_score(y_test,predictions))
plt.title(all_sample_title,size=15)

"""Acurácia do Algoritmo KNN é 98%."""